>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()


>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

>>> try:
...    bg.integer_validator("size", "not an integer")
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] size must be an integer

>>> try:
...    bg.integer_validator("size", 0)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] size must be greater than 0

>>> try:
...    bg.integer_validator("size", -1)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] size must be greater than 0

>>> try:
...    bg.integer_validator()
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> try:
...    bg.integer_validator("size")
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 1 required positional argument: 'value'

>>> try:
...    bg.integer_validator("size", {4,})
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] size must be an integer

>>> try:
...    bg.integer_validator("size", (4,))
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] size must be an integer

>>> try:
...    bg.integer_validator("size", [3])
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] size must be an integer

True turns into 1 which is an int
>>> try:
...    bg.integer_validator("size", True)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] size must be an integer

>>> try:
...    bg.integer_validator("size", {3, 4})
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] size must be an integer

>>> try:
...    bg.integer_validator("size", None)
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] size must be an integer

>>> try:
...    bg.area()
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

>>> bg.integer_validator("size", 5)
